(function () {
    if (typeof window.djCookieUtils === 'object') {
        console.warn('已经引入了djCookieUtils');
        return;
    }
 
    var config = {
        //公共cookie列表数据
        publicCookie: { "dj_psuid": true, "dj_pstoken": true, "dj_pstokenexp": true, "dj_psthirdid": true, "dj_psthsource": true, "dj_psappid": true, "dj_psthappid": true, "dj_psextoken": true, "dj_pssyncflag": true, "dj_cookieid": true, "dj_cityid": true, "dj_location": true, "dj_cityname": true, "dj_hmsr": true, "dj_os": true, "dj_abtestid": true, "dj_openid": true, "dj_usergroup": true, "dj_appchannel": true, "dj_appid": true, "dj_imei": true, "dj_appversion": true, "dj_scwidth": true, "dj_scheight": true, "dj_guanwangid": true, "dj_guanwanguid": true },
        //设置路径
        path: "/",
        //设置主域名，默认取当前页面的主域名
        domain: '.' + document.domain.match(/[\w][\w-]*\.(?:com\.cn|com|cn|net|org|gov)/)[0]
    };
 
    window.djCookieUtils = {
        /**设置公共cookie
          * @param key （string） [必传] 要设置的cookie的key必须在到家公共cookie列表里
          * @param value（string）[必传] 要设置cookie的值
          * @param expires（number | string | null）[可选] 不传默认设置为会话cookie，传入number格式，以天数为计算单位，如需其他粒度的时间可自行传入格式化(toUTCString)好的字符串
          * @param options (object) [可选]{
          *        @param noEncode (boolean) [可选，对传入的值是否进行encodeURIComponent编码，默认编码，如传入值为true，则不编码]      
          *        @param secure (boolean) [可选，默认false]                       
          * }
          * @return (string) 赋值给document.cookie的值
          */
        setPublic: function (key, value, expires, options) {
            return this._handle('public', key, value, expires, options);
        },
        /**获取公共cookie
         * @param key （string） [必传] 要获取的cookie的key必须在到家公共cookie列表里
         * @param noEncode  (boolean) [可选] 对获取的值会默认应用decodeURIComponent解码，如需要源格式输出，请设置为true
         * @return (string | null) 如果存在则返回的cookie的值，不存在返回null
         */
        getPublic: function (key, noEncode) {
            return this._handle('public', key, { "noEncode": noEncode });
        },
        /**删除公共cookie
         * @param key （string） [必传] 要删除的cookie的key必须在到家公共cookie列表里
         */
        removePublic: function (key) {
            this._handle('public', key, null);
        },
        /**设置自定义cookie
         * @param key （string） [必传] 要设置的cookie名字
         * @param value（string）[必传] 要设置cookie的值
         * @param expires（number | string | null）[可选] 不传默认设置为会话cookie，传入number格式，以天数为计算单位，如需其他粒度的时间可自行传入格式化(toUTCString)好的字符串
         * @param options (object) [可选]{
         *        @param noEncode (boolean) [可选，对传入的值是否进行encodeURIComponent编码，默认编码，如传入值为true，则不编码]      
         *        @param secure (boolean) [可选，默认false]                       
         *        @param path (string) [可选，要设置cookie的路径]                       
         *        @param domain (string) [可选，要设置cookie的域名]                       
         * }
         * @return (string) 赋值给document.cookie的值
         */
        setCustom: function (key, value, expires, options) {
            return this._handle('custom', key, value, expires, options);
        },
        /**获取自定义cookie
         * @param key （string） [必传] 要获取的cookie的key
         * @param noEncode  (boolean) [可选] 对获取的值会默认应用decodeURIComponent解码，如需要源格式输出，请设置为true
         * @return (string | null) 如果存在则返回的cookie的值，不存在返回null
         */
        getCustom: function (key, noEncode) {
            return this._handle('custom', key, { "noEncode": noEncode });
        },
        /**要删除的自定义cookie
         * @param key （string） [必传] 要删除的cookie的key
         * @param options (object) [可选]{                            
         *        @param path (string) [可选，要删除cookie的路径]                       
         *        @param domain (string) [可选，要删除cookie的域名]                       
         * }
         */
        removeCustom: function (key, options) {
            this._handle('custom', key, null, null, options);
        },
        _handle: function (type, key, value, expires, options) {
            var days, time, result, decode, path, domain;
 
            if (type === 'public' && !config['publicCookie'][key]) {
                console.error('cookie的key不在公用参数列表中！');
                return;
            }
            if (arguments.length > 2 && String(value) !== "[object Object]") {
                options = typeof options === "object" ? options : {};
                if (value === null || value === undefined) expires = -1;
                if (typeof expires === 'number') {
                    days = expires * 24 * 60 * 60 * 1000;
                    time = new Date();
                    time.setTime(time.getTime() + days);
                    expires = time.toUTCString();
                }
                value = String(value);
                if (type === 'public') {
                    path = '; path =' + config.path;
                    domain = '; domain =' + config.domain;
                } else {
                    path = options.path ? ('; path =' + options.path) : '';
                    domain = options.domain ? ('; domain =' + options.domain) : '';
                }
 
                return (document.cookie = [
                    encodeURIComponent(key), '=',
                    options.noEncode ? value : encodeURIComponent(value),
                    expires ? '; expires=' + expires : '',
                    path,
                    domain,
                    options.secure ? '; secure' : ''
                ].join(''))
            }
 
            options = value || {}
            decode = options.noEncode ? function (s) { return s } : decodeURIComponent
            return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null
        }
    }
}());